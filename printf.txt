agora vou passar o projeto completo


int	tratament_flags(const char *string, va_list args)
{
	int	counter;

	counter = 0;
	if (*string == 'c')
		counter = flag_c(args);
	else if (*string == '%')
		counter = flag_percent();
	else if (*string == 'p')
		counter = flag_p(args);
	else if (*string == 's')
		counter = flag_s(args);
	else if (*string == 'd' || *string == 'i')
		counter = flag_di(args);
	else if (*string == 'u')
		counter = flag_u(args);
	else if (*string == 'x')
		counter = flag_x(args);
	else if (*string == 'X')
		counter = flag_x2(args);
	else if (*string == ' ')
		counter = flag_space();
	return (counter);
}

int	ft_printf(const char *string, ...)
{
	va_list	args;
	int		bytes;
	int		index;

	index = 0;
	bytes = 0;
	va_start(args, string);
	while (string[index] != '\0')
	{
		if (string[index] == '%')
		{
			index++;
			if (ft_strchr("c%sdiuxXp ", string[index]) != NULL)
				bytes += tratament_flags(&string[index], args) + 1;
			index++;
		}
		else
		{
			bytes += ft_putchar(string[index]);
			index++;
		}
	}
	va_end(args);
	return (bytes);
}

flags

int	flag_c(va_list args)
{
	char	caracter;
	int		counter;

	counter = 0;
	caracter = va_arg(args, int);
	counter += ft_putchar(caracter);
	return (counter);
}

int	flag_percent(void)
{
	char	caracter;
	int		counter;

	caracter = '%';
	counter = 0;
	counter += ft_putchar(caracter);
	return (counter);
}

int	flag_s(va_list args)
{
	char	*string;
	int		counter;

	counter = 0;
	string = va_arg(args, char *);
	counter += ft_putstr(string);
	return (counter);
}

int	flag_space(void)
{
	int	counter;

	counter = 0;
	counter += ft_putchar('%');
	counter += ft_putchar(' ');
	return (counter);
}

int	flag_u(va_list args)
{
	unsigned int	nbr;
	char			*number;
	int				index;
	int				counter;

	counter = 0;
	nbr = va_arg(args, unsigned int);
	index = 0;
	number = ft_itoa_unsigned(nbr);
	while (number[index])
	{
		counter += ft_putchar(number[index]);
		index++;
	}
	free(number);
	return (counter);
}

int	flag_di(va_list args)
{
	long	nbr;
	char	*number;
	int		index;
	int		counter;

	counter = 0;
	index = 0;
	nbr = va_arg(args, int);
	number = ft_itoa_base(nbr, "0123456789");
	while (number[index])
	{
		counter += ft_putchar(number[index]);
		index++;
	}
	free(number);
	return (counter);
}

int	flag_p(va_list args)
{
	size_t	ptr;
	int		counter;

	counter = 0;
	ptr = va_arg(args, size_t);
	counter += ft_putptr(ptr, "0123456789abcdef");
	return (counter);
}

int	flag_x(va_list args)
{
	int		nbr;
	int		index;
	char	*number;
	int		counter;

	counter = 0;
	index = 0;
	nbr = va_arg(args, int);
	number = ft_itoa_base(nbr, "0123456789abcdef");
	while (number[index])
	{
		counter += ft_putchar(number[index]);
		index++;
	}
	free(number);
	return (counter);
}

int	flag_x2(va_list args)
{
	int		nbr;
	int		index;
	char	*number;
	int		counter;

	counter = 0;
	index = 0;
	nbr = va_arg(args, int);
	number = ft_itoa_base(nbr, "0123456789ABCDEF");
	while (number[index])
	{
		counter += ft_putchar(number[index]);
		index++;
	}
	free(number);
	return (counter);
}

e por fim funções auxiliares

int	ft_putchar(char c)
{
	return (write(1, &c, 1));
}

int	ft_putstr(const char *s)
{
	return (write(1, s, ft_strlen(s)));
}

char	*ft_itoa_unsigned(unsigned int n)
{
	char			*str;
	size_t			len;
	unsigned int	temp;

	len = 1;
	temp = n;
	while (temp >= 10)
	{
		temp /= 10;
		len++;
	}
	str = (char *)malloc((len + 1) * sizeof(char));
	if (str == NULL)
		return (NULL);
	str[len] = '\0';
	while (len-- > 0)
	{
		str[len] = (n % 10) + '0';
		n /= 10;
	}
	return (str);
}

char	*ft_itoa_base(long int nbr, char *base)
{
	t_variables	itoa;

	itoa.len_base = ft_strlen(base);
	itoa.len = ft_nbrlen(nbr);
	itoa.str = malloc((itoa.len + 1) * sizeof(char));
	if (itoa.str == NULL)
		return (NULL);
	itoa.str[itoa.len] = '\0';
	if (nbr == 0)
	{
		itoa.str[0] = base[0];
		return (itoa.str);
	}
	if (nbr < 0)
	{
		itoa.str[0] = '-';
		nbr = -nbr;
	}
	while (itoa.len > 0 && itoa.str[itoa.len - 1] != '-')
	{
		itoa.str[--itoa.len] = base[nbr % itoa.len_base];
		nbr /= itoa.len_base;
	}
	return (itoa.str);
}

int	ft_putptr(size_t number, char *base)
{
	int	bytesread;
	int	base_len;

	bytesread = 0;
	base_len = ft_strlen(base);
	if (number == 0)
	{
		return (ft_putstr("(nil)"));
	}
	if (number >= (unsigned long)base_len)
	{
		bytesread += ft_putptr((number / base_len), base);
	}
	else
	{
		bytesread += ft_putstr("0x");
	}
	bytesread += ft_putchar(base[number % base_len]);
	return (bytesread);
}

void	ft_putnbr(int n)
{
	char	digit;
	long	nb;

	nb = n;
	if (nb == 0)
	{
		write(1, "0", 1);
		return ;
	}
	if (nb < 0)
	{
		write(1, "-", 1);
		nb = -nb;
	}
	if (nb >= 10)
		ft_putnbr_fd(nb / 10, 1);
	digit = '0' + (nb % 10);
	write(1, &digit, 1);
}

char	*ft_strchr(const char *s, int c)
{
	while (*s)
	{
		if (*s == (unsigned char)c)
			return ((char *)s);
		s++;
	}
	if ((char)c == '\0')
		return ((char *)s);
	return (NULL);
}

size_t	ft_strlen(const char *msg)
{
	int	counter;

	counter = 0;
	while (msg[counter])
		counter++;
	return (counter);
}
